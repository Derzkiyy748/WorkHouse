from aiogram import Bot, Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.types import ContentType
from database.requiests import get_task, get_chatts, get_task_group, up_price, get_usere, finish_taskk, finish_taskk_2
from keyboards.inline.group import menu_group, vibor_rev
from states.state import Up_price, Rew
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.base import StorageKey
from misc.message import menu_group_text
import textwrap
import asyncio

router_group = Router()

@router_group.message(F.content_type == ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: Message, bot: Bot):
    users = await bot.get_chat_member_count(message.chat.id)
    if users < 3:
        await message.reply('ü§ù <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.</b>\n'
                            '‚ÑπÔ∏è –ü–æ—Å–ª–µ –µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu', parse_mode='html')
    else:
        msg = await message.reply('ü§ù –í—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!\n'
                                  '‚ÑπÔ∏è –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /menu', parse_mode='html')
        await bot.pin_chat_message(message.chat.id, msg.message_id)


@router_group.message(F.text == "/menu", F.chat.type != "private")
async def menu_group_1(message: Message, bot: Bot):

    users = await bot.get_chat_member_count(message.chat.id)
    if users < 3:
        await message.reply('ü§ù <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.</b>\n'
                            '‚ÑπÔ∏è –ü–æ—Å–ª–µ –µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu', parse_mode='html')
    else:
        await message.answer(menu_group_text(), reply_markup=await menu_group(),parse_mode='html')

    
    
@router_group.callback_query(F.data == "task_info")
async def task_info(call: CallbackQuery, bot: Bot):
    ps = await get_chatts(call.message.chat.id)
    print(call.message.chat.id)
    print(ps.task_ids)
    task = await get_task(ps.task_ids)

    await call.message.answer(
        textwrap.dedent(f'''
        –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {task.task_id}\n
        –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.category}\n
        –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {task.podcategory}\n
        –ú–∏–Ω.—Ç–∑: {task.min_tz}\n
        –ü–æ–ª–Ω–æ–µ —Ç–∑: {task.max_tz}\n\n
        –°—Ç–æ–∏–º–æ—Å—Ç—å: {task.price}\n
        –î–∞—Ç–∞|–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {task.time}'''))
    




@router_group.callback_query(F.data == 'up_price')
async def edit_price_1(call: CallbackQuery, bot: Bot):
  
   
    await call.message.answer('<b>üìå–ö–ª–∏–µ–Ω—Ç –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> /edit_price <i>[–≤–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞]</i>\n'
                              '<b>–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –µ—ë —É–º–µ–Ω—å—à–∏—Ç—å, –ø–µ—Ä–µ–¥ —á–∏—Å–ª–∞–º–∏ –ø–∏—à–∏—Ç–µ –∑–Ω–∞–∫</b> "-" <i>(–±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ [])</i>')
    

@router_group.callback_query(F.data == 'finish_task')
async def finish_task(call: CallbackQuery, bot: Bot):

    await call.message.answer('<b>üìå–ö–ª–∏–µ–Ω—Ç –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å,—á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b>: /finish_task',
                              parse_mode='html')

    

edit_price = {"worker": None, "user": None}

@router_group.message(F.text.startswith("/edit_price"), F.chat.type != "private")
async def edit_price_2(msg: Message, bot: Bot, state: FSMContext):
    chat = await get_chatts(msg.chat.id)

    if len(msg.text.split(" ")) > 1:  # Check if there's a price value after splitting
        price_value = int(msg.text.split(" ")[1])
        print("Price value extracted:", price_value)  # Add this line for debugging

        print("Message sender ID:", msg.from_user.id)
        print("Group user ID:", chat.group_user_id)

        if int(msg.from_user.id) == int(chat.group_worker_id):
            edit_price["worker"] = int(price_value)
          
        elif int(msg.from_user.id) == int(chat.group_user_id):
            edit_price["user"] = int(price_value)
            print("User price updated:", price_value)  # Add this line for debugging

        else:
            msg.answer(text="‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        user_price = edit_price['user']
        worker_price = edit_price['worker']
        print("Edit price dict:", edit_price)  # Add this line for debugging

        if user_price is not None and worker_price is not None:
            if user_price == worker_price:
                await up_price(chat.task_ids, user_price)
                ts = await get_task(chat.task_ids)
                await msg.answer(text=f"<b>‚úîÔ∏è–¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞!/b>\n\n<b>–ö —Ü–µ–Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å:/b> +{user_price}\n\n<b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–¥–µ–ª–∫–∏:/b> {ts.price}")
                edit_price["worker"] = None
                edit_price["user"] = None
            else:
                await msg.answer(text=f"<b>‚ùå–¶–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è!/b>\n<b>–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞/b>")
        else:
            user_price_text = '‚ùå–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π' if user_price is None else user_price
            worker_price_text = '‚ùå–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π' if worker_price is None else worker_price
            
            tp = await bot.send_message(
                msg.chat.id,
                text=f"<b>üöÄ–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞/b>\n\n"
                    f"<b>–¶–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:/b> {user_price_text}\n"
                    f"<b>–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:/b> {worker_price_text}"
            )
            
            await bot.pin_chat_message(msg.chat.id, message_id=tp.message_id)
    else:
        await msg.reply(text="<b>‚ùå–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:/b> /edit_price [—Ü–µ–Ω–∞]")

edit_finish = {
    "worker": None,
    "user": None
}
@router_group.message(F.text == "/finish_task", F.chat.type != "private")
async def edit_price_2(msg: Message, bot: Bot, state: FSMContext):
    
    chat = await get_chatts(msg.chat.id)

    if int(msg.from_user.id) == int(chat.group_worker_id):
        edit_finish["worker"] = 1
        
    elif int(msg.from_user.id) == int(chat.group_user_id):
        edit_finish["user"] = 1
        
    else:
        await msg.answer(text="‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return

    user_price = edit_finish['user']
    worker_price = edit_finish['worker']

    if user_price is not None and worker_price is not None:
        user = await get_usere(chat.group_user_id)
        ts = await get_task(chat.task_ids)

        if int(user.balance) >= int(ts.price):
            await finish_taskk(chat.task_ids)
            await finish_taskk_2(chat.group_user_id, ts.price)

            tp = await bot.send_message(
                msg.chat.id,
                text=f"<b>‚úîÔ∏è–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.</b>\n <i>–ó–∞–∫–∞–∑—á–∏–∫, —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –∑–∞–∫–∞–∑.</i>",
                parse_mode='html'
            )
            await bot.pin_chat_message(msg.chat.id, message_id=tp.message_id)

            await bot.send_message(
                chat_id=chat.group_user_id,
                text=f'üöÄ–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{ts.task_id} ?',
                reply_markup=await vibor_rev()
            )
            await state.set_state(Rew.star)

            edit_finish["worker"] = None
            edit_finish["user"] = None
        else:
            await msg.answer(
                text=f'<b>‚ùå–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {user.username}, –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã.</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i>',
                parse_mode='html'
            )
    else:
        tp = await bot.send_message(
            msg.chat.id,
            text=f"<b>üöÄ–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>",
            parse_mode='html'
        )
        await bot.pin_chat_message(msg.chat.id, message_id=tp.message_id)

    







