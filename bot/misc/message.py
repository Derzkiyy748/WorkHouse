import textwrap

def main_text():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    return textwrap.dedent('''
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Ü–µ–Ω—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äì <b>üè°WorkHouse!</b>\n\n
        üöÄ–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–ø—ã—Ç–Ω—ã–º–∏ –∫–æ–¥–µ—Ä–∞–º–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —Ç–∞–∫ –∏ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥—É –∫–æ–¥–µ—Ä–æ–≤, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n
        üìå–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –≤ –º–∏—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–π –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!
    ''')

def profile_workers(work, ts_1, ts_2, rating_representation, total_reviews, average_rating):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ—Ä–∫–µ—Ä–∞
    return: –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ—Ä–∫–µ—Ä–∞
    """

    return textwrap.dedent(f'''
            <b>üîÆ–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n
            <b>telegram id:</b> {work.worker_id}\n
            <b>‚îé–∏–º—è:</b> {work.worker_name}
            <b>‚î£—É—Ä–æ–≤–µ–Ω—å:</b> {work.worker_status}
            <b>‚î£–±–∞–ª–∞–Ω—Å:</b> {work.worker_balance}
            <b>‚îñ—Ä–µ–π—Ç–∏–Ω–≥:</b> {rating_representation} ({average_rating}) ({total_reviews})\n
            <b>–æ–ø–∏—Å–∞–Ω–∏–µ:</b> {work.worker_description}\n
            <b>‚îé–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {ts_1}
            <b>‚îñ–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {ts_2}
            '''
            )

def profile_user(user, task_1, task_2):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è —é–∑–µ—Ä–∞
    return: –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —é–∑–µ—Ä–∞
    """

    return textwrap.dedent(f'''
            <b>üîÆ–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n
            <b>telegram id:</b> {user.user_id}\n
            <b>‚îé–∏–º—è:</b> {user.username}
            <b>‚îñ–±–∞–ª–∞–Ω—Å:</b> {user.balance}\n
            <b>‚îé–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {task_1}
            <b>‚îñ–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> {task_2}
            '''
            )


def open_task(task):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
    return: –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
    """

    return textwrap.dedent(f'''
            <b>üîî–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b> {task.task_id}?\n
            üìó–ú–∏–Ω. —Ç–∑: {task.min_tz}
            üìô–ü–æ–ª–Ω–æ–µ —Ç–∑: {task.max_tz}\n
            üí∞–¶–µ–Ω–∞: {task.price}
            '''
            )



def open_task_user(task, work, rating_representation, total_reviews, average_rating):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
    return: –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
    """

    return textwrap.dedent(f'''
            üîî–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤–∑—è–ª: {work.worker_name}!\n
            üìó–†–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {average_rating} ({rating_representation}) ({total_reviews})\n
            üìô–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {task.max_tz}
            '''
            )

def new_application(tasks, data, user_id):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    param: tasks
    param: data
    param: user_id
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞—è–≤–∫–∏
    """

    return textwrap.dedent(f'''
            üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! üîî\n
            üìã –ó–∞–¥–∞–Ω–∏–µ ‚Ññ {tasks.task_id}\n
            üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user_id}\n\n
            üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data["task_1"]}
            üè¢ –ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data["task_2"]}\n
            üìÑ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data["min_tz"]}
            üìÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data["max_tz"]}\n
            üí∞ –¶–µ–Ω–∞: {data["price"]}
            '''
            )

def new_worker(data):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    param: tasks
    param: data
    param: user_id
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞—è–≤–∫–∏
    """

    return textwrap.dedent(f'''
            üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ—Ä–∫–µ—Ä–∞! üîî\n
            üìã –°–¢–ï–ö ‚Ññ {data["selected_skills"]}\n
            üë§ –ó–∞–∫–∞–∑—á–∏–∫: {data["username"]}\n\n
            üìÑ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {data["biograf"]}\n
            üìÑ –†–∞–±–æ—Ç–∞ —Å API: {data["despt"]}
            '''
            )

def channel_task(task):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π
    param: task
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π
    """

    return textwrap.dedent(f"""
        <b>üíé–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µüíé</b>\n\n
        <b>üìù–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.category}</b>\n
        <b>üìò–ú–∏–Ω. —Ç–∑</b>: {task.min_tz}
        <b>üìí–ü–æ–ª–Ω–æ–µ —Ç–∑</b>: {task.max_tz}\n
        <b>üí∞–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</b>: {task.price}"""
    )


def desc_mytask(task):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    param: task
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    """
    data = task.time
    data = data.split("|")
    return textwrap.dedent(f"""
        <b>üî∞–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è</b>: {task.status}\n
        <b>üìù–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.category}</b>
        <b>üìù–ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {task.podcategory}\n
        <b>üìò–ú–∏–Ω. —Ç–∑</b>: {task.min_tz}
        <b>üìí–ü–æ–ª–Ω–æ–µ —Ç–∑</b>: {task.max_tz}\n
        <b>üìÖ–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</b>: {data[0]}
        <b>üìÖ–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞</b>: {data[1]}\n
        <b>üí∞–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</b>: {task.price}\n
        <b>üíé–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {task.user_id_task}"""
    )


def desc_mytask_worker(task):
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    param: task
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    """
    data: list = task.time.split("|")
    return textwrap.dedent(f"""
        <b>üî∞–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è</b>: {task.status}\n
        <b>üìù–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {task.category}</b>
        <b>üìù–ü–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>: {task.podcategory}\n
        <b>üìò–ú–∏–Ω. —Ç–∑</b>: {task.min_tz}
        <b>üìí–ü–æ–ª–Ω–æ–µ —Ç–∑</b>: {task.max_tz}\n
        <b>üìÖ–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</b>: {data[0]}
        <b>üìÖ–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞</b>: {data[1]}\n
        <b>üí∞–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</b>: {task.price}\n
        <b>üíé–ó–∞–∫–∞–∑—á–∏–∫:</b> {task.user_id_task}"""
    )



def menu_group_text():
    """
    param: —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
    return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
    """
    return textwrap.dedent(f"""
                <b>üìù–ú–µ–Ω—é –≥—Ä—É–ø–ø—ã</b>\n
                –ö–æ–º–∞–Ω–¥—ã:
                /edit_price [–≤–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞] - —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–¥–µ–ª–∫–∏ —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ü–µ–Ω—É
                                
                """)
        